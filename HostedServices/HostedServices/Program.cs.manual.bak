using BruteForceSpaService;
using EasyNetQTools;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using ShortestPathAlgorithms.Algorithms;
using ShortestPathAlgorithms.Models;

namespace HostedServices
{
    internal static class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        
            var server = new Server<Request, Response>(request 
                => Task.Run(() =>
                {
                    var path = DepthFirstBruteForce.FindShortestPath(request.Graph, request.Start, request.End);
                    return new Response
                    {
                        Path = path
                    };
                }));
        
            while (true)
            {
                Console.WriteLine("S - start the server, T - terminate the server, D - dispose of the server");
                var key = Console.ReadKey();
                Console.WriteLine();
                var started = false;
                
                switch (key.Key)
                {
                    case ConsoleKey.S:
                        if (!started)
                        {
                            server.Start();
                            started = true;
                        }
                        break;
                    
                    case ConsoleKey.T:
                        await server.StopAsync();
                        started = false;
                        break;
                    
                    case ConsoleKey.D:
                        server.Dispose();
                        started = false;
                        break;
                    
                    default:
                        Console.WriteLine("Not an option!");
                        break;
                }
            }
        }
    }
}